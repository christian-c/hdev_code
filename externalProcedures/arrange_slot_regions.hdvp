<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0.1" cs="510298221">
<procedure name="arrange_slot_regions">
<interface>
<io>
<par name="RegionStartGoal"/>
<par name="PreviousRegion"/>
</io>
<oo>
<par name="Region"/>
</oo>
<ic>
<par name="NumOfSlotInRow"/>
</ic>
</interface>
<body>
<c>* 2要素の配列からなる領域を入力とし，その2つの領域の間に指定した数だけ領域を並べる．</c>
<l>Number := NumOfSlotInRow-2</l>
<l>count_obj(RegionStartGoal, NumberOfRegion)</l>
<l>area_center(RegionStartGoal, Area, Row, Col)</l>
<l>copy_obj(RegionStartGoal, tmpRegion, 1, -1)</l>
<c></c>
<l>StartX := Col[0]</l>
<l>StartY := Row[0]</l>
<l>EndX := Col[NumberOfRegion / 2]</l>
<l>EndY := Row[NumberOfRegion / 2]</l>
<c></c>
<l>addX := ((EndX - StartX) / (Number + 1))</l>
<l>addY := ((EndY - StartY) / (Number + 1))</l>
<c></c>
<l>for i := 1 to Number by 1</l>
<l>    copy_obj(RegionStartGoal, ObjectSelected, 1, NumberOfRegion / 2)</l>
<l>    move_region(ObjectSelected, ObjectSelected, addY*i, addX*i)</l>
<l>    concat_obj(tmpRegion, ObjectSelected, tmpRegion)</l>
<l>endfor</l>
<c>*</c>
<c>*複数の基準領域から構成される入力領域InRegionを，基準領域毎にunionする．</c>
<c>*例えば，ある基準領域が2つのオブジェクトから構成されている場合，</c>
<c>*-----</c>
<c>*InRegion = [[Obj1a, Obj2a], [Obj1b, Ojb2b], ...., [Obj1z, Obj2z]]</c>
<c>*↓</c>
<c>*OutRegion = [union(Obj1a,...,Obj1z), union(Obj2a,...,Obj2z)]</c>
<c>*-----</c>
<c>*というように再構成される．</c>
<l>gen_empty_obj(OutRegions)</l>
<l>count_obj(tmpRegion, NumberOfRegions)</l>
<c>* N:基準Regionを構成する要素数</c>
<l>N := NumberOfRegions / NumOfSlotInRow</l>
<c></c>
<l>for i := 0 to N - 1 by 1</l>
<l>    gen_empty_region(tmpRegions)</l>
<l>    for j := 0 to NumOfSlotInRow - 1 by 1</l>
<l>        copy_obj(tmpRegion, tmpRegion2, N*j+i+1,1)</l>
<l>        concat_obj(tmpRegions, tmpRegion2, tmpRegions)</l>
<l>    endfor</l>
<l>    union1(tmpRegions, tmpRegions)</l>
<l>    concat_obj(OutRegions, tmpRegions, OutRegions)    </l>
<l>endfor</l>
<c>*</c>
<c>*再構成された領域同士を結合する．</c>
<c>*-----</c>
<c>*PrevisousRegions = [union(Obj1a,...,Obj1z), union(Obj2a,...,Obj2z)]</c>
<c>*InRegions           = [union(Obj3a,...,Obj3z), union(Obj4a,...,Obj4z)]</c>
<c>*↓</c>
<c>*OutRegions = [ union(union(Obj1a,...,Obj1z), union(Obj3a,...,Obj3z)),  union( union(Obj2a,...,Obj2z), union(Obj4a,...,Obj4z)) ]</c>
<c>*-----</c>
<c>*</c>
<c>*ただし，領域同市の要素数が異なる場合は，InRegionのみが出力領域にコピーされる．</c>
<c></c>
<l>count_obj(PreviousRegion, PLength)</l>
<l>count_obj(OutRegions, ILength)</l>
<l>gen_empty_obj(Region)</l>
<l>if (PLength = 0)</l>
<l>    copy_obj(OutRegions, Region, 1, -1)</l>
<l>elseif (PLength = ILength)</l>
<l>    for i := 1 to ILength by 1</l>
<l>        select_obj(PreviousRegion, tmp1, i)</l>
<l>        select_obj(OutRegions, tmp2, i)</l>
<l>        union2(tmp1, tmp2, tmp)</l>
<l>        concat_obj(Region, tmp, Region)</l>
<l>    endfor</l>
<l>else</l>
<l>    copy_obj(OutRegions, Region, 1, -1)</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="arrange_slot_regions">
<abstract lang="ja_JP">始点と終点に配置された領域を入力として，指定した数だけ領域を列状に並べ，それまでの領域と結合して出力する．</abstract>
<short lang="ja_JP">領域を列状に並べる</short>
<parameters>
<parameter id="NumOfSlotInRow">
<description lang="ja_JP">指定列に並ぶスロットの数．</description>
<multivalue>false</multivalue>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="PreviousRegion">
<description lang="ja_JP">入力領域2．これに本プロシージャで作成された領域を加えたものが出力領域になる．</description>
<multivalue>optional</multivalue>
<sem_type>region</sem_type>
</parameter>
<parameter id="Region">
<description lang="ja_JP">出力領域．NumOfSlotInRowで指定した数だけ領域が並んだものに，PreviousRegionを加えたもの．</description>
<multivalue>optional</multivalue>
<sem_type>region</sem_type>
</parameter>
<parameter id="RegionStartGoal">
<description lang="ja_JP">入力領域1．並べる領域の始点と終点を表す．</description>
<multivalue>true</multivalue>
<sem_type>region</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
