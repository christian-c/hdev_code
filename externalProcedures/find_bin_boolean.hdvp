<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.3.2" cs="3663751468">
<procedure name="find_bin_boolean">
<interface>
<io>
<par name="MappedImage"/>
<par name="InRegions"/>
</io>
<oo>
<par name="ImageOut"/>
<par name="OutRegions"/>
</oo>
<ic>
<par name="FindParams"/>
</ic>
<oc>
<par name="Boolean"/>
<par name="Areas"/>
</oc>
</interface>
<body>
<l>count_obj(InRegions, NumberOfRegions)</l>
<c></c>
<c>* FindParams の要素数チェック</c>
<l>if (|FindParams| # 16)</l>
<l>    H_ERR_WIPN1 := 1401</l>
<l>    get_error_text (H_ERR_WIPN1, msg)</l>
<l>    throw ([H_ERR_WIPN1, msg + ' : ' + |FindParams| + '!=16'])</l>
<l>endif</l>
<c></c>
<c>* Version取得</c>
<l>VersionStrings := split(FindParams[3],'.')</l>
<c></c>
<c>* Versionの値により、fast_thresholdのMinSizeの値を変更する。</c>
<l>if (number(VersionStrings[0]) &gt; 2)</l>
<l>    if(number(VersionStrings[0]) = 3 and number(VersionStrings[1]) &lt; 3)</l>
<c>        * メジャーバージョンが3かつマイナーバージョンが3未満</c>
<l>        MinSize := 20</l>
<l>    else</l>
<c>        * 3.3以降</c>
<l>        MinSize := 5</l>
<l>    endif</l>
<l>else</l>
<c>    * メジャーバージョンが3未満</c>
<l>    MinSize := 20</l>
<l>endif</l>
<c></c>
<c>*[colorSpace, useChannel, Selection, MinGray[], MaxGray[], MinArea[], MaxArea[]]</c>
<l>colorSpace := FindParams[8]</l>
<l>useChannel := FindParams[9]</l>
<l>Selection  := FindParams[10]</l>
<c>*</c>
<l>if (is_number(FindParams[11]))</l>
<l>    MinGray := number(FindParams[11])</l>
<l>    MaxGray := number(FindParams[12])</l>
<l>    MinArea := number(FindParams[13])</l>
<l>    MaxArea := number(FindParams[14])</l>
<l>else</l>
<l>    Args := regexp_replace(FindParams[11:14], ['([\\s])','replace_all'], '')</l>
<l>    MinGray := number(split(Args[0], ','))</l>
<l>    MaxGray := number(split(Args[1], ','))</l>
<l>    MinArea := number(split(Args[2], ','))</l>
<l>    MaxArea := number(split(Args[3], ','))</l>
<l>endif</l>
<c></c>
<l>medianMaskRadius := FindParams[15]</l>
<c></c>
<c>* 最小値&lt;最大値のチェック</c>
<l>for i := 0 to NumberOfRegions -1 by 1</l>
<l>    if(MinGray[i] &gt; MaxGray[i] or MinArea[i] &gt; MaxArea[i])</l>
<l>        H_ERR_WIPV1 := 1301</l>
<l>        get_error_text (H_ERR_WIPV1, msg)        </l>
<l>        throw ([H_ERR_WIPV1, msg + ' : ' + i + ' : ' + MinGray[i] + '&gt;' + MaxGray[i] + ', '\
               + MinArea[i] + '&gt;' + MaxArea[i]])</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c></c>
<l>Boolean :=[]</l>
<l>gen_empty_region(OutRegions)</l>
<c>*</c>
<c></c>
<l>count_channels (MappedImage, Channels)</l>
<l>if (Channels = 3)</l>
<l>    if (colorSpace = 'None')</l>
<l>        useChannel := -1</l>
<l>        copy_obj (MappedImage, ImageOut, 1, -1)</l>
<l>    elseif (colorSpace = 'gray')</l>
<l>        useChannel := -1</l>
<l>        rgb1_to_gray (MappedImage, ImageOut)</l>
<l>    elseif (colorSpace # 'rgb')</l>
<l>        decompose3 (MappedImage, img1, img2, img3)</l>
<l>        trans_from_rgb (img1, img2, img3, img1, img2, img3, colorSpace)</l>
<l>    else</l>
<c>        * colorSpace = 'rgb'</c>
<l>        decompose3 (MappedImage, img1, img2, img3)</l>
<l>    endif</l>
<c>    *</c>
<l>    if (useChannel = -1)</l>
<c>        *</c>
<l>    elseif (useChannel = 0)</l>
<l>        copy_obj (img1, ImageOut, 1, -1)</l>
<l>    elseif (useChannel = 1)</l>
<l>        copy_obj (img2, ImageOut, 1, -1)</l>
<l>    elseif (useChannel = 2)</l>
<l>        copy_obj (img3, ImageOut, 1, -1)</l>
<l>    else</l>
<l>        throw( [30010, 'Wrong channel is specified: ' + useChannel])</l>
<l>    endif</l>
<l>else</l>
<l>    copy_obj (MappedImage, ImageOut, 1, -1)</l>
<l>endif</l>
<c></c>
<c>* ノイズ除去</c>
<l>if (medianMaskRadius &gt; 0)</l>
<l>    median_image (ImageOut, SubmitImage, 'circle', medianMaskRadius, 'mirrored')</l>
<l>else</l>
<l>    copy_obj (ImageOut, SubmitImage, 1, -1)</l>
<l>endif</l>
<c></c>
<c>*</c>
<l>try</l>
<l>    Areas := []</l>
<l>    for i := 1 to NumberOfRegions by 1</l>
<l>        copy_obj(InRegions, InRegionsSelected, i, 1)</l>
<l>        reduce_domain(SubmitImage, InRegionsSelected, ImageReduced)</l>
<l>        fast_threshold(ImageReduced, tmpRegion, MinGray[i-1], MaxGray[i-1], MinSize)</l>
<l>        connection (tmpRegion, tmpRegion)</l>
<l>        area_center(tmpRegion, Area, tmpRow, tmpCol)</l>
<l>        if (Selection = 'Sum')</l>
<l>            if(sum(Area) &lt; MinArea[i-1] or sum(Area) &gt; MaxArea[i-1])</l>
<l>                tuple_concat(Boolean, false, Boolean)</l>
<l>                *gen_empty_region (emptyRegion)</l>
<l>                *concat_obj(OutRegions, emptyRegion, OutRegions)</l>
<l>                 concat_obj(OutRegions, tmpRegion, OutRegions)</l>
<l>                Areas := [Areas, sum(Area)]</l>
<l>            else</l>
<l>                tuple_concat(Boolean, true, Boolean)</l>
<l>                concat_obj(OutRegions, tmpRegion, OutRegions)</l>
<l>                Areas := [Areas, sum(Area)]</l>
<l>            endif</l>
<l>        elseif (Selection = 'Max')</l>
<l>            if (max(Area) &lt; MinArea[i-1] or max(Area) &gt; MaxArea[i-1])</l>
<l>                tuple_concat(Boolean, false, Boolean)</l>
<l>                *gen_empty_region (emptyRegion)</l>
<l>                *concat_obj(OutRegions, emptyRegion, OutRegions)</l>
<l>                tuple_find (Area, max(Area),Index)</l>
<l>                copy_obj (tmpRegion, tmpRegion, Index+1, 1)</l>
<l>                concat_obj(OutRegions, tmpRegion, OutRegions)</l>
<l>                Areas := [Areas, max(Area)]</l>
<l>            else</l>
<l>                tuple_concat(Boolean, true, Boolean)</l>
<l>                tuple_find (Area, max(Area),Index)</l>
<l>                copy_obj (tmpRegion, tmpRegion, Index+1, 1)</l>
<l>                concat_obj(OutRegions, tmpRegion, OutRegions)</l>
<l>                Areas := [Areas, max(Area)]</l>
<l>            endif</l>
<l>        else</l>
<c>            ** error</c>
<l>        endif</l>
<l>    endfor</l>
<l>catch(Exception)</l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="find_bin_boolean">
<abstract lang="ja_JP">入力画像に対して，入力領域内で認識パラメータを用いて二値化真偽判定を行う．

</abstract>
<see_also>
<item>trans_from_rgb</item>
</see_also>
<short lang="ja_JP">二値化真偽判定を行う</short>
<parameters>
<parameter id="Areas">
<description lang="ja_JP">OutRegionsで返される各領域の面積．単位は，ピクセル．</description>
</parameter>
<parameter id="Boolean">
<description lang="ja_JP">真偽判定の結果．TrueとFalse（C#側では，1/0)で返される．InRegionsと同じ要素数のTupleとなる．</description>
<mixed_type>optional</mixed_type>
<multivalue>optional</multivalue>
<sem_type>integer</sem_type>
<value_list>
<item>0</item>
<item>1</item>
</value_list>
</parameter>
<parameter id="FindParams">
<description lang="ja_JP">認識パラメータ．外部設計書の「認識パラメータ」の項を参照．</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>any</sem_type>
</parameter>
<parameter id="ImageOut"/>
<parameter id="InRegions">
<description lang="ja_JP">入力領域．この領域(複数可)が，判定の対象となる．</description>
<multivalue>optional</multivalue>
<sem_type>region</sem_type>
</parameter>
<parameter id="MappedImage">
<description lang="ja_JP">二値化真偽判定を行う領域が写された補正画像．補正画像は，歪み補正(ステレオの場合は，平行化)が行われた後の画像を意味する．</description>
<multichannel>optional</multichannel>
<multivalue>false</multivalue>
<sem_type>image</sem_type>
<type_list>
<item>int2</item>
<item>int4</item>
<item>int8</item>
</type_list>
</parameter>
<parameter id="OutRegions">
<description lang="ja_JP">出力領域．入力領域のうち，条件に合う領域が出力される．したがって，要素数は，入力領域と等しく，それぞれの領域の面積は，入力領域以下となる．</description>
<multivalue>optional</multivalue>
<sem_type>region</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
