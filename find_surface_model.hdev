<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.3.4" cs="830858529">
<procedure name="main">
<interface/>
<body>
<c>* Initialization</c>
<c></c>
<l>gen_empty_obj (EmptyObject)</l>
<l>read_cam_par ('campar.dat', CamParam)</l>
<l>ImagePath := 'time_of_flight/'</l>
<l>dev_close_window ()</l>
<c></c>
<l>Index := 2</l>
<c>* ***************************************</c>
<c>* Acquire scene</c>
<c>* ***************************************</c>
<c>* Load the XYZ Images</c>
<l>read_image (Image, ImagePath + 'engine_cover_xyz_' + Index$'02')</l>
<l>decompose3 (Image, X, Y, Z)</l>
<c></c>
<c>* Remove the background plane to increase the speed and</c>
<c>* robustness of the surface-based matching</c>
<l>threshold (Z, SceneGood, 0, 666)</l>
<l>reduce_domain (X, SceneGood, XReduced)</l>
<l>xyz_to_object_model_3d (XReduced, Y, Z, ObjectModel3DSceneReduced)</l>
<c>* </c>
<l>xyz_to_object_model_3d (X, Y, Z, ObjectModel3DScene)</l>
<c>* </c>
<c>* Visualize matching scene and key points</c>
<c></c>
<l>*visualize_object_model_3d (WindowHandle, [ObjectModel3DScene], [], [], ['color_' + [0],'point_size_' + [0]], ['gray',1.0], [], [], [], PoseOut)</l>
<c></c>
<l>threshold (Z, Region, 1, 1e90)</l>
<c>    * </c>
<l>    reduce_domain (X, Region, Xr)</l>
<l>    reduce_domain (Y, Region, Yr)</l>
<l>    reduce_domain (Z, Region, Zr)</l>
<c>    * </c>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<l>Mode := 0</l>
<l>OldButton := 0</l>
<l>dev_update_off ()</l>
<l>dev_open_window_fit_image (Z, 0, 0, -1, -1, WindowHandle2D)</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle3D)</l>
<l>while (true)</l>
<l>dev_update_off ()</l>
<c></c>
<l>if (Mode == 0)</l>
<l>    dev_set_window (WindowHandle2D)</l>
<l>    dev_display (Z)</l>
<l>    disp_message (WindowHandle2D, 'RGB/IR Image', 'window', 12, 12, 'black', 'true')</l>
<c>    * </c>
<l>    dev_set_window (WindowHandle3D)</l>
<l>    dev_display (Z)</l>
<l>    disp_message (WindowHandle3D, 'Z Image', 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle3D, 'Click here to segment your object', 'window', 12 + 24, 12, 'black', 'true')</l>
<c>    * </c>
<l>    try</l>
<l>        get_mposition (WindowHandle3D, Row, Column, Button)</l>
<l>        if (Button != OldButton)</l>
<c>            * Start segmenting</c>
<l>            segment_object (X, Y, Z, Region, WindowHandle3D)</l>
<c>            * </c>
<l>            dev_clear_window ()</l>
<l>            dev_display (Z)</l>
<l>            dev_display (Region)</l>
<l>            disp_message (WindowHandle3D, 'Creating surface model, please wait...', 'window', 12, 12, 'black', 'true')</l>
<l>            reduce_domain (X, Region, Xmodel)</l>
<l>            reduce_domain (Y, Region, Ymodel)</l>
<l>            reduce_domain (Z, Region, Zmodel)</l>
<c>            * </c>
<l>            xyz_to_object_model_3d (Xmodel, Ymodel, Zmodel, OM3DModel)</l>
<l>            create_surface_model (OM3DModel, 0.03, [], [], SurfaceModelID)</l>
<c>            * </c>
<c>            * Create a mesh for display</c>
<l>            Factor := 0.15</l>
<c>            * Mask remaining data, otherwise zoom_image_factor produces artefacts</c>
<l>            complement (Region, RegionComplement)</l>
<l>            overpaint_region (Zmodel, RegionComplement, 0, 'fill')</l>
<c>            * </c>
<l>            zoom_image_factor (Xmodel, Xdisp, Factor, Factor, 'none')</l>
<l>            zoom_image_factor (Ymodel, Ydisp, Factor, Factor, 'none')</l>
<l>            zoom_image_factor (Zmodel, Zdisp, Factor, Factor, 'none')</l>
<l>            threshold (Zdisp, RGood, 0.0001, 400)</l>
<l>            reduce_domain (Xdisp, RGood, Xdisp)</l>
<l>            xyz_to_object_model_3d (Xdisp, Ydisp, Zdisp, OM3DDisplay)</l>
<l>            *prepare_object_model_3d (OM3DDisplay, 'segmentation', 'true', [], [])</l>
<l>            write_surface_model (SurfaceModelID, './test_3d.dat')</l>
<l>            write_object_model_3d (OM3DModel, 'om3', './test_3d_model', [], [])</l>
<c></c>
<l>            Mode := 1 </l>
<l>            break</l>
<l>        endif</l>
<l>    catch (Exception)</l>
<l>*         stop ()</l>
<l>    endtry</l>
<c>  </c>
<l>endif</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<l>if (Mode == 1)</l>
<l>    read_surface_model ('/home/christian-c/workspace/Vision/HDevelop/Development Environment/test_3d.dat.sfm', SFM)</l>
<l>    read_object_model_3d ('/home/christian-c/workspace/Vision/HDevelop/Development Environment/test_3d_model.om3', 'm', [], [], ObjectModel3DModel, Status)</l>
<l>    dev_clear_window ()</l>
<l>    visualize_object_model_3d (WindowHandle3D, ObjectModel3DModel, [], [], [], [],[], [], [], PoseOut)</l>
<c></c>
<c>    </c>
<l>    NumImages := 10</l>
<l>    for Index := 2 to NumImages by 1</l>
<c>        * ***************************************</c>
<c>        * Acquire scene</c>
<c>        * ***************************************</c>
<c>        * Load the XYZ Images</c>
<l>        read_image (Image, ImagePath + 'engine_cover_xyz_' + Index$'02')</l>
<l>        decompose3 (Image, X, Y, Z)</l>
<c>        * Remove the background plane to increase the speed and</c>
<c>        * robustness of the surface-based matching</c>
<l>        threshold (Z, SceneGood, 0, 666)</l>
<l>        reduce_domain (X, SceneGood, XReduced)</l>
<l>        xyz_to_object_model_3d (XReduced, Y, Z, ObjectModel3DSceneReduced)</l>
<c>        * </c>
<c>        * ***************************************</c>
<c>        * Match: Find the reference model in the</c>
<c>        *        3D scene</c>
<c>        * ***************************************</c>
<l>        count_seconds (T0)</l>
<l>        find_surface_model (SFM, ObjectModel3DSceneReduced, 0.05, 0.3, 0.15, 'true', 'num_matches', 10, Pose, Score, SurfaceMatchingResultID)</l>
<l>        count_seconds (T1)</l>
<l>        TimeForMatching := (T1 - T0) * 1000</l>
<c>        * </c>
<c>        * ***************************************</c>
<c>        * Display: Visualize the result(s)</c>
<c>        * ***************************************</c>
<c>        * Prepare the visualization of the result(s)</c>
<l>        ObjectModel3DResult := []</l>
<l>        for Index2 := 0 to |Score| - 1 by 1</l>
<l>            if (Score[Index2] &lt; 0.11)</l>
<l>                continue</l>
<l>            endif</l>
<l>            CPose := Pose[Index2 * 7:Index2 * 7 + 6]</l>
<c>            * </c>
<l>            pose_to_hom_mat3d (CPose, CHomMat3D)</l>
<l>            affine_trans_object_model_3d (ObjectModel3DModel, CHomMat3D, ObjectModel3DAffineTrans)</l>
<l>            ObjectModel3DResult := [ObjectModel3DResult,ObjectModel3DAffineTrans]</l>
<l>        endfor</l>
<c>        * </c>
<l>        xyz_to_object_model_3d (X, Y, Z, ObjectModel3DScene)</l>
<c>        * </c>
<c>        * Visualize matching scene and key points</c>
<l>        Message := 'Original scene points (white)'</l>
<l>        Message[1] := 'Sampled scene points (cyan)'</l>
<l>        Message[2] := 'Key points (yellow)'</l>
<l>        get_surface_matching_result (SurfaceMatchingResultID, 'sampled_scene', [], SampledScene)</l>
<l>        get_surface_matching_result (SurfaceMatchingResultID, 'key_points', [], KeyPoints)</l>
<l>        dev_clear_window ()</l>
<l>        visualize_object_model_3d (WindowHandle3D, [ObjectModel3DScene,SampledScene,KeyPoints], [], [], ['color_' + [0,1,2],'point_size_' + [0,1,2]], ['gray','cyan','yellow',1.0,3.0,5.0], Message, [], [], PoseOut)</l>
<c>    </c>
<c>        * </c>
<c>        * Visualize result(s)</c>
<l>        Message := 'Scene: ' + Index</l>
<l>        Message[1] := 'Found ' + |ObjectModel3DResult| + ' object(s) in ' + TimeForMatching$'.3' + ' ms'</l>
<l>        ScoreString := sum(Score$'.2f' + ' / ')</l>
<l>        Message[2] := 'Score(s): ' + ScoreString{0:strlen(ScoreString) - 4}</l>
<l>        NumResult := |ObjectModel3DResult|</l>
<l>        tuple_gen_const (NumResult, 'green', Colors)</l>
<l>        tuple_gen_const (NumResult, 'circle', Shapes)</l>
<l>        tuple_gen_const (NumResult, 3, Radii)</l>
<l>        Indices := [1:NumResult]</l>
<c>        * </c>
<l>        dev_clear_window ()</l>
<l>        visualize_object_model_3d (WindowHandle3D, [ObjectModel3DScene,ObjectModel3DResult], [], PoseOut, ['color_' + [0,Indices],'point_size_0'], ['gray',Colors,1.0], Message, [],[], PoseOut)</l>
<c>        </c>
<l>        tuple_length (Score, numInstance)</l>
<c>        </c>
<l>        rodriquezPose := []</l>
<l>        gbaPose := []</l>
<l>        abgPose := []   </l>
<l>*         dev_set_window (WindowHandle2D)</l>
<l>*         dev_clear_window ()</l>
<l>*         dev_set_colored (3)</l>
<l>*         dev_set_draw ('margin')</l>
<l>*         dev_set_line_width (3)</l>
<l>*         dev_display (Z)</l>
<l>*         for idx := 0 to numInstance-1 by 1</l>
<c></c>
<l>*             tuple_select_range (Pose, idx*7, idx*7 + 6, pose)</l>
<l>*             convert_pose_type (pose, 'Rp+T', 'rodriguez', 'coordinate_system', poseOut)</l>
<l>*             convert_pose_type (pose, 'Rp+T', 'gba', 'point', poseOut1)</l>
<l>*             convert_pose_type (pose, 'Rp+T', 'abg','point', poseOut2)</l>
<c>            </c>
<l>*             tuple_concat (rodriquezPose, poseOut, rodriquezPose)</l>
<l>*             tuple_concat (gbaPose, poseOut1, gbaPose)</l>
<l>*             tuple_concat (abgPose, poseOut2, abgPose)</l>
<c></c>
<c>            </c>
<l>*         endfor</l>
<l>*         stop ()</l>
<c>        * </c>
<c>        * ***************************************</c>
<c>        * Clear: Free result(s)</c>
<c>        * ***************************************</c>
<l>        clear_object_model_3d (ObjectModel3DSceneReduced)</l>
<l>        clear_object_model_3d (ObjectModel3DScene)</l>
<l>        clear_object_model_3d (ObjectModel3DResult)</l>
<l>        clear_surface_matching_result (SurfaceMatchingResultID)</l>
<l>    endfor</l>
<l>clear_object_model_3d (ObjectModel3DModel)</l>
<l>clear_surface_model (SFM)</l>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="segment_object">
<interface>
<io>
<par name="X"/>
<par name="Y"/>
<par name="Z"/>
</io>
<oo>
<par name="Region"/>
</oo>
<ic>
<par name="WindowHandle"/>
</ic>
</interface>
<body>
<l>dev_set_window (WindowHandle)</l>
<l>dev_set_preferences ('graphics_window_context_menu', 'false')</l>
<c>* </c>
<l>get_image_size (Z, Width, Height)</l>
<l>dev_open_window (0, Width + 5, Width, Height + 24 * 3, 'black', WindowHandle2)</l>
<l>dev_open_window (0, 0, Width, Height + 24 * 3, 'black', WindowHandleBuffer)</l>
<l>dev_set_part (0, 0, Height + 24 * 3, Width)</l>
<l>dev_set_line_width (2)</l>
<c>* </c>
<l>threshold (Z, Region, 0.001, 99999)</l>
<c>* </c>
<c>* Set initial parameters</c>
<l>min_max_gray (X, X, 0, MinX, MaxX, RangeX)</l>
<l>min_max_gray (Y, Y, 0, MinY, MaxY, RangeY)</l>
<l>min_max_gray (Region, Z, 0, MinZ, MaxZ, RangeZ)</l>
<l>min_max_gray (Z, Z, 0, MinZAll, MaxZAll, RangeZAll)</l>
<l>AllMin := min([MinX,MinY,MinZ])</l>
<l>AllMax := max([MaxX,MaxY,MaxZ])</l>
<l>ScaleX := Width * 1.0 / RangeX</l>
<l>ScaleY := Height * 1.0 / RangeY</l>
<l>ScaleZ := (Width + Height) * 1.0 / RangeZ</l>
<c>* </c>
<l>Border := 0.1</l>
<l>TXMin := MinX + RangeX * Border</l>
<l>TXMax := MinX + RangeX * (1 - Border)</l>
<l>TYMin := MinY + RangeY * Border</l>
<l>TYMax := MinY + RangeY * (1 - Border)</l>
<l>TZMin := MinZ + RangeZ * Border</l>
<l>TZMax := MinZ + RangeZ * (1 - Border)</l>
<c>* </c>
<l>LastButton := 0</l>
<c>* 0=Wait, 1=Drag</c>
<l>Mode := 0</l>
<c>* </c>
<l>dev_update_off ()</l>
<l>while (1)</l>
<c>    * Update screen</c>
<c>    * Color the scene according to the selected regions</c>
<c>    * Gray = Unselected</c>
<c>    * Red = Selected</c>
<c>    * Other = Partially selected</c>
<l>    dev_set_window (WindowHandleBuffer)</l>
<c>    * </c>
<l>    threshold (X, RegionX, TXMin, TXMax)</l>
<l>    threshold (Y, RegionY, TYMin, TYMax)</l>
<l>    threshold (Z, RegionZ, TZMin, TZMax)</l>
<l>    complement (RegionX, RegionComplementX)</l>
<l>    complement (RegionY, RegionComplementY)</l>
<l>    complement (RegionZ, RegionComplementZ)</l>
<c>    * </c>
<l>    intersection (RegionX, RegionY, RXY)</l>
<l>    intersection (RXY, RegionComplementZ, RXY)</l>
<l>    intersection (RegionX, RegionZ, RXZ)</l>
<l>    intersection (RXZ, RegionComplementY, RXZ)</l>
<l>    intersection (RegionY, RegionZ, RYZ)</l>
<l>    intersection (RYZ, RegionComplementX, RYZ)</l>
<c>    * </c>
<l>    intersection (RegionX, RegionY, RXYZ)</l>
<l>    intersection (RXYZ, RegionZ, RXYZ)</l>
<c>    * </c>
<l>    intersection (RegionX, RegionComplementY, RX)</l>
<l>    intersection (RX, RegionComplementZ, RX)</l>
<l>    intersection (RegionY, RegionComplementX, RY)</l>
<l>    intersection (RY, RegionComplementZ, RY)</l>
<l>    intersection (RegionZ, RegionComplementX, RZ)</l>
<l>    intersection (RZ, RegionComplementY, RZ)</l>
<c>    * </c>
<l>    intersection (RegionComplementX, RegionComplementY, Rnone)</l>
<l>    intersection (Rnone, RegionComplementZ, Rnone)</l>
<c>    * </c>
<c>    * Coloring</c>
<l>    scale_image_range (Z, Zs, MinZAll, MaxZAll)</l>
<l>    convert_image_type (Zs, Zb, 'byte')</l>
<l>    copy_image (Zb, Empty)</l>
<l>    overpaint_region (Empty, Empty, 0, 'fill')</l>
<l>    compose3 (Empty, Empty, Empty, FinalImage)</l>
<c>    * </c>
<l>    H := 0.3</l>
<l>    make_rgb (Zb, Rnone, FinalImage, FinalImage, H, H, H)</l>
<l>    make_rgb (Zb, RX, FinalImage, FinalImage, 0, 0, H)</l>
<l>    make_rgb (Zb, RY, FinalImage, FinalImage, 0, H, 0)</l>
<l>    make_rgb (Zb, RZ, FinalImage, FinalImage, 0, H, H)</l>
<l>    make_rgb (Zb, RXY, FinalImage, FinalImage, H, 0, H)</l>
<l>    make_rgb (Zb, RXZ, FinalImage, FinalImage, H, H, 0)</l>
<l>    make_rgb (Zb, RYZ, FinalImage, FinalImage, H, H, H)</l>
<l>    make_rgb (Zb, RXYZ, FinalImage, FinalImage, 5, 0, 0)</l>
<c>    * </c>
<l>    dev_clear_window ()</l>
<l>    dev_display (FinalImage)</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'Y', 'window', Height + 24, 12, 'red', 'false')</l>
<l>    disp_message (WindowHandleBuffer, 'Z', 'window', Height + 24 * 2, 12, 'red', 'false')</l>
<c>    * </c>
<l>    StartCol := 36</l>
<l>    EndCol := Width - 24</l>
<l>    TotalWidth := EndCol - StartCol</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'X', 'window', Height, 12, 'red', 'false')</l>
<l>    YPosX := Height + 6</l>
<l>    disp_line (WindowHandleBuffer, YPosX, 36, YPosX, Width - 24)</l>
<l>    PX0 := (TXMin - MinX) * TotalWidth / RangeX + StartCol</l>
<l>    PX1 := (TXMax - MinX) * TotalWidth / RangeX + StartCol</l>
<l>    disp_line (WindowHandleBuffer, YPosX - 6, PX0, YPosX + 6, PX0)</l>
<l>    disp_line (WindowHandleBuffer, YPosX - 6, PX1, YPosX + 6, PX1)</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'Y', 'window', Height + 24, 12, 'green', 'false')</l>
<l>    YPosY := Height + 6 + 24</l>
<l>    disp_line (WindowHandleBuffer, YPosY, 36, YPosY, Width - 24)</l>
<l>    PY0 := (TYMin - MinY) * TotalWidth / RangeY + StartCol</l>
<l>    PY1 := (TYMax - MinY) * TotalWidth / RangeY + StartCol</l>
<l>    disp_line (WindowHandleBuffer, YPosY - 6, PY0, YPosY + 6, PY0)</l>
<l>    disp_line (WindowHandleBuffer, YPosY - 6, PY1, YPosY + 6, PY1)</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'Z', 'window', Height + 24 * 2, 12, 'blue', 'false')</l>
<l>    YPosZ := Height + 6 + 24 * 2</l>
<l>    disp_line (WindowHandleBuffer, YPosZ, 36, YPosZ, Width - 24)</l>
<l>    PZ0 := (TZMin - MinZ) * TotalWidth / RangeZ + StartCol</l>
<l>    PZ1 := (TZMax - MinZ) * TotalWidth / RangeZ + StartCol</l>
<l>    disp_line (WindowHandleBuffer, YPosZ - 6, PZ0, YPosZ + 6, PZ0)</l>
<l>    disp_line (WindowHandleBuffer, YPosZ - 6, PZ1, YPosZ + 6, PZ1)</l>
<c>    * </c>
<l>    if (0 == Mode)</l>
<l>        disp_message (WindowHandleBuffer, 'Segment your object from the scene by thresholding in X, Y and Z', 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Make sure that the background is excluded', 'window', 12 + 24, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Grab a line with the left mouse button to change thresholds', 'window', 12 + 24 * 2, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Center-click on a point to automatically include it', 'window', 12 + 24 * 3, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Right-Click to finish', 'window', 12 + 24 * 4, 12, 'black', 'true')</l>
<l>    else</l>
<l>        disp_message (WindowHandleBuffer, 'Move mouse to change threshold, release to finish', 'window', 12, 12, 'black', 'true')</l>
<l>    endif</l>
<c>    * </c>
<l>    copy_rectangle (WindowHandleBuffer, WindowHandle2, 0, 0, Height + 24 * 3 - 1, Width - 1, 0, 0)</l>
<c>    * </c>
<c>    * Check for user input</c>
<l>    if (0 == Mode)</l>
<l>        try</l>
<l>            get_mposition (WindowHandle2, Row1, Column1, Button1)</l>
<l>            if (Button1 != LastButton and Button1 == 1)</l>
<c>                * Find closest</c>
<l>                DistancesY := [abs(Row1 - YPosX),abs(Row1 - YPosY),abs(Row1 - YPosZ)]</l>
<l>                DistancesX := [abs(Column1 - PX0),abs(Column1 - PX1),abs(Column1 - PY0),abs(Column1 - PY1),abs(Column1 - PZ0),abs(Column1 - PZ1)]</l>
<l>                tuple_sort_index (DistancesY, Indices)</l>
<l>                if (DistancesY[Indices[0]] &lt; 24)</l>
<l>                    Closest := Indices[0]</l>
<c>                    * Find closest slider</c>
<l>                    tuple_sort_index (DistancesX[Closest * 2:Closest * 2 + 1], Indices1)</l>
<l>                    Closest := Closest * 2 + Indices1[0]</l>
<l>                    Start := Column1</l>
<l>                    LastButton := Button1</l>
<l>                    Mode := 1</l>
<l>                endif</l>
<l>            elseif (Button1 != LastButton and Button1 == 4)</l>
<l>                intersection (RegionX, RegionY, Region)</l>
<l>                intersection (Region, RegionZ, Region)</l>
<l>*                 dev_set_preferences ('graphics_window_context_menu', 'true')</l>
<l>                dev_close_window ()</l>
<l>                dev_set_window (WindowHandle2)</l>
<l>                dev_close_window ()</l>
<l>                return ()</l>
<l>            elseif (Button1 != LastButton and Button1 == 2)</l>
<c>                * Get XYZ of selected point</c>
<l>                get_grayval (X, Row1, Column1, vx)</l>
<l>                TXMin := min([TXMin,vx])</l>
<l>                TXMax := max([TXMax,vx])</l>
<l>                get_grayval (Y, Row1, Column1, vy)</l>
<l>                TYMin := min([TYMin,vy])</l>
<l>                TYMax := max([TYMax,vy])</l>
<l>                get_grayval (Z, Row1, Column1, vz)</l>
<l>                TZMin := min([TZMin,vz])</l>
<l>                TZMax := max([TZMax,vz])</l>
<l>            endif</l>
<l>        catch (Exception1)</l>
<l>        endtry</l>
<l>    else</l>
<c>        * Track</c>
<l>        try</l>
<l>            get_mposition (WindowHandle2, Row1, Column1, Button1)</l>
<l>            if (Button1 == LastButton)</l>
<l>                RelPosition := (Column1 - StartCol) * 1.0 / TotalWidth</l>
<l>                RelPosition := max([min([RelPosition,1]),0])</l>
<l>                if (0 == Closest)</l>
<l>                    TXMin := MinX + RelPosition * RangeX</l>
<l>                    TXMin := max([TXMin,MinX])</l>
<l>                    TXMax := max([TXMin,TXMax])</l>
<l>                elseif (1 == Closest)</l>
<l>                    TXMax := MinX + RelPosition * RangeX</l>
<l>                    TXMax := min([TXMax,MaxX])</l>
<l>                    TXMin := min([TXMin,TXMax])</l>
<l>                elseif (2 == Closest)</l>
<l>                    TYMin := MinY + RelPosition * RangeY</l>
<l>                    TYMin := max([TYMin,MinY])</l>
<l>                    TYMax := max([TYMin,TYMax])</l>
<l>                elseif (3 == Closest)</l>
<l>                    TYMax := MinY + RelPosition * RangeY</l>
<l>                    TYMax := min([TYMax,MaxY])</l>
<l>                    TYMin := min([TYMin,TYMax])</l>
<l>                elseif (4 == Closest)</l>
<l>                    TZMin := MinZ + RelPosition * RangeZ</l>
<l>                    TZMin := max([TZMin,MinZ])</l>
<l>                    TZMax := max([TZMin,TZMax])</l>
<l>                elseif (5 == Closest)</l>
<l>                    TZMax := MinZ + RelPosition * RangeZ</l>
<l>                    TZMax := min([TZMax,MaxZ])</l>
<l>                    TZMin := min([TZMin,TZMax])</l>
<l>                else</l>
<c>                    * Internal error</c>
<l>                    stop ()</l>
<l>                endif</l>
<l>            else</l>
<c>                * Stop tracking</c>
<l>                Mode := 0</l>
<l>                LastButton := Button1</l>
<l>            endif</l>
<l>        catch (Exception2)</l>
<l>        endtry</l>
<l>    endif</l>
<l>endwhile</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="segment_object">
<parameters>
<parameter id="Region"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="make_rgb">
<interface>
<io>
<par name="Zb"/>
<par name="Region"/>
<par name="OldColorImage"/>
</io>
<oo>
<par name="ColorImage"/>
</oo>
<ic>
<par name="R"/>
<par name="G"/>
<par name="B"/>
</ic>
</interface>
<body>
<l>copy_image (Zb, Dup)</l>
<l>complement (Region, RegionComplement)</l>
<l>overpaint_region (Dup, RegionComplement, 0, 'fill')</l>
<c>* </c>
<l>scale_image (Dup, IR, R, 0)</l>
<l>scale_image (Dup, IG, G, 0)</l>
<l>scale_image (Dup, IB, B, 0)</l>
<c>* </c>
<l>compose3 (IR, IG, IB, TempColorImage)</l>
<l>add_image (TempColorImage, OldColorImage, ColorImage, 1, 0)</l>
<l>return ()</l>
</body>
<docu id="make_rgb">
<parameters>
<parameter id="B"/>
<parameter id="ColorImage"/>
<parameter id="G"/>
<parameter id="OldColorImage"/>
<parameter id="R"/>
<parameter id="Region"/>
<parameter id="Zb"/>
</parameters>
</docu>
</procedure>
</hdevelop>
